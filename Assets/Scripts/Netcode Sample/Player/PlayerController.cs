using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;
using Unity.Netcode;

public class PlayerController : NetworkBehaviour
{
    //[SerializeField] PlayerInput PlayerInput; // This is a reference to the C# script that was generated by the new input system
    CharacterController CharacterController; // CharacterController compent so we can move our Player around
    Animator Animator;

    int IsWalkingHash;  // Use hash instead of strings when getting/setting animator variables for performance reasons
    int IsRunningHash;

    Vector2 CurMovementInput;   // Holds the current Vector2 for the Move action after being set up in the callback (See Awake)
    Vector3 CurWalkMovement;    // Current walking movement of the player.  Input is only 2D so upgrade to 3D during callback
    Vector3 CurRunMovement;     // Current running movement of the player
    float RunSpeedMultiplier = 3.0f;   // How much faster the player will run when run button is pressed
    bool IsMovementPressed;     // Quick way to check if any movement is being pressed
    bool IsRunPressed;          // Whether or not the run button is being held down
    float RotationFactorPerFrame = 15f; // How much we rotate from where we are to where we're pointing with the controller per frame

    private void Awake()
    {
        // Create an instance of the generated PlayerInput script so you can actually use it
        //PlayerInput = new PlayerInput();
        // Grab references
        CharacterController = GetComponent<CharacterController>(); 
        Animator = GetComponent<Animator>();
        // Set up hash codes
        IsWalkingHash = Animator.StringToHash("IsWalking");
        IsRunningHash = Animator.StringToHash("IsRunning");       
    }
    
    /// <summary>
    /// Handle rotating player 
    /// </summary>
    void HandleRotations()
    {
        // Where we are moving next taken from our CurrentMovement variable
        Vector3 positionToLookAt = new Vector3(CurWalkMovement.x, 0f, CurWalkMovement.z);
        Quaternion curRotation = transform.rotation;
        if (IsMovementPressed == true)
        {
            // New Quaternion based on where player is currently pressing (if they're pressing)
            Quaternion targetRotation = Quaternion.LookRotation(positionToLookAt);
            // Interpolate the rotations
            transform.rotation = Quaternion.Slerp(curRotation, targetRotation, RotationFactorPerFrame * Time.deltaTime);
        }        
    }

    /// <summary>
    /// Handle animations 
    /// </summary>
    void HandleAnimations()
    {
        bool isWalking = Animator.GetBool(IsWalkingHash);
        bool isRunning = Animator.GetBool(IsRunningHash);

        // Start walking if movement pressed is true and not already walking
        if (IsMovementPressed && !isWalking)
        {
            Animator.SetBool(IsWalkingHash, true);
        }
        // stop walking if isMovementPressed is false and not already walking
        else if (!IsMovementPressed && isWalking)
        {
            Animator.SetBool(IsWalkingHash, false);
        }
        // run if movement and run pressed are true and not currently running
        if ((IsMovementPressed && IsRunPressed) && !isRunning)
        {
            Animator.SetBool(IsRunningHash, true);
        }
        // stop running if movement or run pressed are false and currently running
        else if ((!IsMovementPressed || !IsRunPressed) && isRunning)
        {
            Animator.SetBool(IsRunningHash, false);
        }
    }

    // Update is called once per frame
    void Update()
    {
        HandleRotations();
        HandleAnimations(); // Sort out animations
        // Walk or run the character depending on if the modifier key is down
        if(IsRunPressed == true)
        {
            CharacterController.Move(CurRunMovement * Time.deltaTime);
        }
        {
            CharacterController.Move(CurWalkMovement * Time.deltaTime); 
        }              
    }

    public void OnMovement(InputAction.CallbackContext context)
    {
        Vector2 inputMovement = context.ReadValue<Vector2>();
        //Debug.Log("OnMovement() inputMovement: " + inputMovement.ToString("F2"));

        CurMovementInput = context.ReadValue<Vector2>();
        CurWalkMovement.x = CurMovementInput.x; // You move along the x and z axis in Unity so store the correct values based on the Vector2
        CurWalkMovement.z = CurMovementInput.y;
        CurRunMovement.x = CurMovementInput.x * RunSpeedMultiplier; // Make sure running is faster
        CurRunMovement.z = CurMovementInput.y * RunSpeedMultiplier;
        IsMovementPressed = (CurMovementInput.x != 0 || CurMovementInput.y != 0);     
    }  

    /// <summary>
    /// Callback for Run action being started or canceled
    /// </summary>
    /// <param name="context"></param>
    public void OnRun(InputAction.CallbackContext context)
    {
        IsRunPressed = context.ReadValueAsButton();
    }    
}
